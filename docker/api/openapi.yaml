openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample API
  description: >-
    A sample API that uses a sample-site as an example to demonstrate features in
    the OpenAPI 3.0 specification
servers:
  - url: 'http://localhost:8003'
paths:
  /users:
    get:
      description: >
        Returns all users
      operationId: findUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - 'name'
                - 'birthday'
              properties:
                name:
                  type: string
                  example: 'newbie'
                birthday:
                  type: string
                  format: 'date-time'
                  example: '1971-01-01T00:00:00Z'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      summary: Info for a specific user
      operationId: findUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: 'object'
      required:
        - 'id'
        - 'name'
      properties:
        id:
          type: 'integer'
          format: 'int64'
          example: 1
        name:
          type: 'string'
          example: 'Taro'
        birthday:
          type: 'string'
          format: 'date-time'
          example: '1971-01-01T00:00:00Z'
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Error:
      type: 'object'
      required:
        - 'code'
        - 'message'
      properties:
        code:
          type: 'integer'
          format: 'int32'
          example: 500
        message:
          type: 'string'
          example: ' unexpected error'
