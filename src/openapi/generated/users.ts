/**
 * Generated by orval v6.6.1 üç∫
 * Do not edit manually.
 * Sample API
 * A sample API that uses a sample-site as an example to demonstrate features in the OpenAPI 3.0 specification
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query'
import type { Users, Error, FindUsersParams, User, CreateUserBody } from './openapi.schemas'
import { customInstance, ErrorType } from '../config'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

/**
 * Returns all users

 */
export const findUsers = (params?: FindUsersParams) => {
  return customInstance<Users>({ url: `/users`, method: 'get', params })
}

export const getFindUsersQueryKey = (params?: FindUsersParams) => [
  `/users`,
  ...(params ? [params] : []),
]

export const useFindUsers = <TData = AsyncReturnType<typeof findUsers>, TError = ErrorType<Error>>(
  params?: FindUsersParams,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof findUsers>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getFindUsersQueryKey(params)

  const queryFn: QueryFunction<AsyncReturnType<typeof findUsers>> = () => findUsers(params)

  const query = useQuery<AsyncReturnType<typeof findUsers>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  )

  return {
    queryKey,
    ...query,
  }
}

/**
 * @summary Create a user
 */
export const createUser = (createUserBody: CreateUserBody) => {
  return customInstance<User | void>({ url: `/users`, method: 'post', data: createUserBody })
}

export const useCreateUser = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createUser>,
    TError,
    { data: CreateUserBody },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof createUser>,
    { data: CreateUserBody }
  > = (props) => {
    const { data } = props || {}

    return createUser(data)
  }

  return useMutation<
    AsyncReturnType<typeof createUser>,
    TError,
    { data: CreateUserBody },
    TContext
  >(mutationFn, mutationOptions)
}
/**
 * @summary Info for a specific user
 */
export const findUserById = (userId: number) => {
  return customInstance<User>({ url: `/users/${userId}`, method: 'get' })
}

export const getFindUserByIdQueryKey = (userId: number) => [`/users/${userId}`]

export const useFindUserById = <
  TData = AsyncReturnType<typeof findUserById>,
  TError = ErrorType<Error>
>(
  userId: number,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof findUserById>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getFindUserByIdQueryKey(userId)

  const queryFn: QueryFunction<AsyncReturnType<typeof findUserById>> = () => findUserById(userId)

  const query = useQuery<AsyncReturnType<typeof findUserById>, TError, TData>(queryKey, queryFn, {
    enabled: !!userId,
    ...queryOptions,
  })

  return {
    queryKey,
    ...query,
  }
}
