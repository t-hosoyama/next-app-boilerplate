version: '3.8'

services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/postgres/initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - 5432:5432
  graphql-engine:
    image: hasura/graphql-engine:v2.1.1
    ports:
      - '8080:8080'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      ## HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      ## https://hasura.io/docs/latest/graphql/core/auth/authentication/webhook.html
      ## HASURA_GRAPHQL_AUTH_HOOK: http://host.docker.internal:5000/api/objectdata
      ## HASURA_GRAPHQL_AUTH_HOOK_MODE: GET
  swagger-editor:
    image: swaggerapi/swagger-editor
    container_name: 'swagger-editor'
    ports:
      - '8001:8080'
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: 'swagger-ui'
    ports:
      - '8002:8080'
    volumes:
      - ./docker/api/openapi.yaml:/openapi.yaml
    environment:
      SWAGGER_JSON: /openapi.yaml
  swagger-api:
    image: stoplight/prism:3
    container_name: 'swagger-api'
    ports:
      - '8003:4010'
    command: mock -h 0.0.0.0 /openapi.yaml
    volumes:
      - ./docker/api/openapi.yaml:/openapi.yaml
volumes:
  db_data:
